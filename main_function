global percentage


def func(num_employees, num_shifts, num_days, employees_per_shift, priorities, shift_requests, max_num_of_shifts):
    """
    find an optimal assignment of employees to shifts
    :returns: dataframe
    """
    from ortools.sat.python import cp_model
    import pandas as pd

    all_employees = range(num_employees)
    all_shifts = range(num_shifts)
    all_days = range(num_days)
    num_shifts2 = sum(employees_per_shift)

    # Creates the model.
    model = cp_model.CpModel()

    # Creates shift variables.
    # shifts[(n, d, s)]: employee 'n' works shift 's' on day 'd'.
    shifts = {}
    for n in all_employees:
        for d in all_days:
            for s in all_shifts:
                shifts[(n, d, s)] = model.NewBoolVar(f'shifts[({n},{d},{s})]')

    # This constraint ensures that each shift has a required number of employees
    # x[s] variable indicates how many employees work in shift s
    x = {}
    for s in all_shifts:
        x[s] = model.NewIntVar(1, 15, f'x[{s}]')

    for s in all_shifts:
        model.Add(x[s] == employees_per_shift[s])

    for s in all_shifts:
        for d in all_days:
            for n in all_employees:
                model.Add(x[s] == sum(shifts[(n, d, s)] for n in all_employees))

    # This constraint ensures that no employee works non-consecutive shifts.
    allowed_assignments = []
    if num_shifts == 1:
        allowed_assignments == [[0], [1]]
    elif num_shifts == 2:
        if max_num_of_shifts == 1:
            allowed_assignments = [[0, 0], [0, 1], [1, 0]]
        else:
            allowed_assignments = [[0, 0], [0, 1], [1, 0], [1, 1]]
    elif num_shifts == 3:
        if max_num_of_shifts == 1:
            allowed_assignments = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1]]
        elif max_num_of_shifts == 2:
            allowed_assignments = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0], [0, 1, 1]]
        else:
            allowed_assignments = [[0, 0, 0], [1, 0, 0], [0, 1, 0], [0, 0, 1], [1, 1, 0], [0, 1, 1], [1, 1, 1]]
    elif num_shifts == 4:
        if max_num_of_shifts == 1:
            allowed_assignments = [[0, 0, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1]]
        elif max_num_of_shifts == 2:
            allowed_assignments = [[0, 0, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1],
                                   [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1]]
        else:
            allowed_assignments = [[0, 0, 0, 0], [1, 0, 0, 0], [0, 1, 0, 0], [0, 0, 1, 0], [0, 0, 0, 1],
                                   [1, 1, 0, 0], [0, 1, 1, 0], [0, 0, 1, 1], [1, 1, 1, 0], [0, 1, 1, 1]]
    elif num_shifts == 5:
        if max_num_of_shifts == 1:
            allowed_assignments = [[0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0],
                                   [0, 0, 0, 0, 1]]
        if max_num_of_shifts == 2:
            allowed_assignments = [[0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0],
                                   [0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0],
                                   [0, 0, 0, 1, 1]]
        else:
            allowed_assignments = [[0, 0, 0, 0, 0], [1, 0, 0, 0, 0], [0, 1, 0, 0, 0], [0, 0, 1, 0, 0], [0, 0, 0, 1, 0],
                                   [0, 0, 0, 0, 1], [1, 1, 0, 0, 0, 0], [0, 1, 1, 0, 0], [0, 0, 1, 1, 0],
                                   [0, 0, 0, 1, 1], [0, 0, 1, 1, 1], [0, 1, 1, 1, 0], [1, 1, 1, 0, 0]]

    for n in all_employees:
        for d in all_days:
            model.AddAllowedAssignments(
                [shifts[(n, d, s)] for s in all_shifts], allowed_assignments)

    # Assign shifts evenly
    min_shifts_per_employee = (num_shifts2 * num_days) // num_employees
    if num_shifts2 * num_days % num_employees == 0:
        max_shifts_per_employee = min_shifts_per_employee
    else:
        max_shifts_per_employee = min_shifts_per_employee + num_shifts2 * num_days % num_employees
    for n in all_employees:
        num_shifts_worked = 0
        for d in all_days:
            for s in all_shifts:
                num_shifts_worked += shifts[(n, d, s)]
        model.Add(min_shifts_per_employee <= num_shifts_worked)
        model.Add(num_shifts_worked <= max_shifts_per_employee)

    # Create the objective function
    # Each employee has a rank. Requests of employees with higher ranks are prioritized.
    # The optimal assignment maximizes the number of fulfilled shift requests for those with a higher rank.
    model.Maximize(
        sum(shift_requests[n][d][s] * shifts[(n, d, s)] * priorities[n] for n in all_employees
            for d in all_days for s in all_shifts))

    # Creates the solver and solve.
    solver = cp_model.CpSolver()
    status = solver.Solve(model)

    result_dict = {}
    count_requested = 0
    count_not_requested = 0

    if status == cp_model.OPTIMAL:
        for d in all_days:
            for n in all_employees:
                for s in all_shifts:
                    if solver.Value(shifts[(n, d, s)]) == 1:
                        if shift_requests[n][d][s] == 1:
                            result_dict[n + 1, d + 1, s + 1] = '++'
                            count_requested += 1
                        else:
                            result_dict[n + 1, d + 1, s + 1] = '+-'
                            count_not_requested += 1
                    else:
                        if shift_requests[n][d][s] == 1:
                            result_dict[n + 1, d + 1, s + 1] = '-+'
                            count_not_requested += 1

                        else:
                            result_dict[n + 1, d + 1, s + 1] = '--'
                            count_requested += 1
    columns_dates = []
    for d in all_days:
        for s in all_shifts:
            columns_dates.append(f'd{d + 1}s{s + 1}')
    #indexes_employees = []
    #for n in all_employees:
    #    indexes_employees.append(f'Employee {n + 1}')

    df = pd.DataFrame(columns=columns_dates)
    global percentage
    percentage = round(count_requested / (count_requested + count_not_requested), 1) * 100

    for n in all_employees:
        nl = []
        for k in list(result_dict.keys()):
            if list(k)[0] == n + 1:
                nl.append(result_dict[k])
        df.loc[n + 1] = nl

    # print(f'Requests satisfied: {percentage}' + '%')
    return df
